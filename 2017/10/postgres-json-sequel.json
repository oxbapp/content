{
  "type": [
    "h-entry"
  ],
  "properties": {
    "name": [
      "Store and query JSON in Postgres with the Sequel gem"
    ],
    "content": [
      "With its fast, built-in support for JSON, it's worth considering Postgres for storing and querying your JSON data. Instead of using a specialised document server, Postgres may be the right choice for your application.\n\nAs of [Postgres 9.4][pg94] you can index data stored in a JSONB (binary JSON) column using GIN (\"Generalised Inverted Index\") indexes. JSONB/GIN provides special operators to efficiently and rapidly query data.\n\nAnd for Ruby developers, the [Sequel][] gem offers a collection of convenient methods that make it easy to query Postgres JSONB columns.\n\n## Example usage\nInstall the `sequel_pg` gem:\n\n```sh\n$ gem install sequel_pg\n```\n\nCreate a table with a JSONB column and a GIN index:\n\n```sql\n// Create a table with a JSONB column\nCREATE TABLE posts (permalink VARCHAR(255) PRIMARY KEY, data JSONB);\n\n// Add an index using GIN\nCREATE INDEX posts_gin ON posts USING GIN(data);\n\n// Insert a row with a JSON document\nINSERT INTO posts VALUES ('/2017/10/my-post', '{\n\t\"title\": \"My post\",\n  \"content\": \"This is a new post that I have created.\",\n  \"category\": [\n\t  \"ruby\",\n\t  \"postgres\"\n\t],\n\t\"published\": \"2017-10-10T16:05:10Z\"\n}');\n```\n\nAnd then in Ruby:\n\n```ruby\n# Require the Sequel gem\nrequire 'sequel'\n\n# Include the Postgres JSON Operations extension\nSequel.extension(:pg_json_ops)\n\n# Connect to your Postgres instance via your database URL\nDB = Sequel.connect(DATABASE_URL)\n\n# Ask Sequel to use the Postgres JSON extension with your database\nDB.extension(:pg_json)\n\n# Create a JSONB Operation object for the \"data\" jsonb column in our table\ndata = Sequel.pg_jsonb_op(:data)\n\n# Find posts containing title \"My post\"\nDB[:posts].where(data.get_text('title') => 'My post')\n\n# Find posts where the category array has a \"postgres\" value\nDB[:posts].where(data['category'].contains(['postgres']))\n\n# Find posts where the first value in the category array is \"ruby\"\nDB[:posts].where(data['category'].get_text(0) => 'ruby')\n\n# Find posts which have a content key\nDB[:posts].where(data.has_key?('content'))\n\n# Find posts sorted by the date published\nDB[:posts].order(data['published'])\n```\n\nRead the [Sequel documentation][sequeldocs] for further methods supported by the `pg_json_ops` extension.\n\n## The right choice?\nPostgres is a great solution for JSON in your application, especially if you are already using Postgres for structured data in other tables. It offers easy storage and, with GIN indexes and the Sequel gem, you get fast querying of data from Ruby.\n\nWhere it may not be the right choice is if your use-case requires frequent partial updates to JSON documents. You can of course retrieve the JSON blob, parse it, update the value in the hash, convert back to JSON and then update the column, but a dedicated document database like MongoDB may be a better option.\n\n[sequel]: http://sequel.jeremyevans.net\n[pg94]: https://www.postgresql.org/docs/9.4/static/release-9-4.html\n[sequeldocs]: http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_json_ops_rb.html\n"
    ],
    "category": [
      "postgres",
      "sequel",
      "json",
      "jsonb",
      "ruby"
    ],
    "entry-type": [
      "article"
    ],
    "published": [
      "2017-10-10T16:20:16Z"
    ]
  }
}
